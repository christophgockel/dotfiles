set nocompatible
filetype off

execute pathogen#infect()
set runtimepath^=~/.vim/bundle/ctrlp.vim

set number
set history=1000
set noswapfile
set modeline
set modelines=5

filetype plugin on
filetype indent on

set autoread

set t_Co=256

set ruler
set scrolloff=7
set cmdheight=2

set hid

"proper backspace
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase
set smartcase

set lazyredraw
set magic

set showmatch
set mat=2

"no sounds. at all.
set noerrorbells
set novisualbell
set t_vb=
set tm=500

syntax enable
let base16colorspace=256
colorscheme base16-default
set background=dark

set encoding=utf8

set expandtab
set smarttab
set autoindent
set smartindent
set wrap
set tabstop=2
set shiftwidth=2


"on german keyboards "\" as a leader is painful
let mapleader = ","
let g:mapleader = ","


" convenience
nmap <leader>w :w!<cr>
nmap <leader><leader> :NERDTreeToggle<CR>
nmap <leader>nt :NERDTreeToggle<CR>
nmap <leader>nf :NERDTreeFind<CR>

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" searching
set hlsearch
set incsearch
nnoremap <silent> <leader><space> :nohl<CR>

" tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

autocmd BufNewFile,BufReadPost *.md set filetype=markdown

autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab
autocmd FileType ruby set tabstop=2|set shiftwidth=2|set expandtab
autocmd FileType php set tabstop=4|set shiftwidth=4|set expandtab
autocmd FileType clojure set tabstop=2|set shiftwidth=2|set expandtab

" tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" easier movement between splits
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

"tab mappings
map <D-1> 1gt
map <D-2> 2gt
map <D-3> 3gt
map <D-4> 4gt
map <D-5> 5gt
map <D-6> 6gt
map <D-7> 7gt
map <D-8> 8gt
map <D-9> 9gt
map <D-t> :tabnew<CR>
map <D-w> :tabclose<CR>

execute pathogen#infect()

" navigate from line to line even when the line exceeds the split's width
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>

" highlight unwanted whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" automatically strip trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e


" fixing vim-clojure-static indentation for speclj
augroup CustomEvents
  autocmd!
  autocmd FileType clojure setlocal lispwords+=describe,it,context,around,before,after,before-all,before-after
augroup END


"Rename tabs to show tab# and # of viewports
if exists("+showtabline")
  hi TabLineFill  ctermfg=20 ctermbg=19
  hi TabLine      ctermfg=20 ctermbg=18
  hi TabLineSel   ctermfg=15 ctermbg=33

  hi TabNum       ctermfg=20 ctermbg=18
  hi TabNumSel    ctermfg=15 ctermbg=33
  hi TabWinNum    ctermfg=20 ctermbg=18
  hi TabWinNumSel ctermfg=15 ctermbg=33

  function! TabLineWithIndexAndNumberOfSplits()
    let s = ''
    let wn = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let wn = tabpagewinnr(i,'$')

      let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
      let s .= ' ' . i
      if tabpagewinnr(i,'$') > 1
        let s .= '.'
        let s .= (i== t ? '%#TabWinNumSel#' : '%#TabWinNum#')
        let s .= (tabpagewinnr(i,'$') > 1 ? wn : '')
      end

      let s .= '%*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= ' ' . file . ' '
      let s .= (i == t ? '%m' : '')
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    return s
  endfunction
"  set stal=2
  set tabline=%!TabLineWithIndexAndNumberOfSplits()
endif
